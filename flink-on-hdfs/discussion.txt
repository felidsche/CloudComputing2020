    Which steps in your program require communication and synchronization
    between your workers?

The workers synchronize in fixed time intervals with the Master over Heartbeats.
The first part of our program, which consists of splitting the lines of the input into tuples in a "Map"-task and grouping the tuples based on their key, make use of pipeline parallelism. 
So there is no synchronization necessary.

The second part of our program requires communication over the state of the distributed jobs. Also, all tuples need to be collected onto one worker to be able to perform the sum operation.
This requires the workers to send their tuples over the network. Then, to sort the tuples of the word-count pairs by their count in descending order, we again need all tuples on one worker to perform a sort operation over all elements.
So, synchronisation is required while we are receiving the data.

    What resources is the job bound by? Memory? CPU? Network? Disk?

The job is limited by the network. 
This is because the second part of our program requires communication and synchronization between workers over the network.

    Could you improve the partitioning of your data to yield better run-time?

The partitioning of data between the workers could not yield better runtime, because it is limited by the network and the communication overhead. 
Nevertheless, if the taskslots per worker are increased, i.e. parallelization happens on the same node, the runtime decreases.
